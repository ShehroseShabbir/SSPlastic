"""
Django settings for polyroll_mgmt project.

Generated by 'django-admin startproject' using Django 4.2.23.

Docs:
- Settings: https://docs.djangoproject.com/en/4.2/ref/settings/
- Deployment checklist: https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
"""

import os
from pathlib import Path

# -----------------------------------
# Base paths
# -----------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Folder to store generated invoices
INVOICES_ROOT = BASE_DIR / "invoices"
INVOICES_ROOT.mkdir(parents=True, exist_ok=True)  # auto-create on startup
INVOICE_ROUNDING = {
    "mode": "ceil",       # ceil | half_up | floor (ceil = always round up)
    "quantum": "1",       # '1' rupee, or '10' to round up to next 10, etc.
}
# Path to logo (put the file in your project; e.g. core/static/core/Logo.png)
INVOICE_LOGO_PATH = BASE_DIR / "core" / "static" / "core" / "Logo.png"

# -----------------------------------
# Load environment (optional .env)
# .cpanel.yml can symlink .env -> .env.dev / .env.prod on the server.
# If python-dotenv is installed, we'll load it; otherwise we just use os.environ.
# -----------------------------------
try:
    from dotenv import load_dotenv  # type: ignore
    load_dotenv(BASE_DIR / ".env")
except Exception:
    pass

# -----------------------------------
# Security & core config
# -----------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "dev-insecure-key-change-me"  # fallback for local dev only
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"

# Comma-separated, e.g. "example.com,www.example.com,api.example.com"
ALLOWED_HOSTS = (
    os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")
    if os.getenv("DJANGO_ALLOWED_HOSTS")
    else []
)

# -----------------------------------
# Authentication
# -----------------------------------
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/'      # where to go after successful login
LOGOUT_REDIRECT_URL = '/admin/login/'

# If you set this in env (comma-separated full URLs), Django will trust those for CSRF
# e.g. "https://my.backoffice.kamranenterprises.pk,https://dev.backoffice.kamranenterprises.pk"
CSRF_TRUSTED_ORIGINS = [
    o.strip() for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o.strip()
]

# -----------------------------------
# Applications
# -----------------------------------
INSTALLED_APPS = [
    'core.apps.SSPAdminConfig',   # custom admin (your existing setting)
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.humanize",
    'rest_framework',
    'core.apps.CoreConfig',
]

# -----------------------------------
# Middleware
# -----------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # WhiteNoise (simple static files in cPanel)
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'polyroll_mgmt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'polyroll_mgmt.wsgi.application'

# -----------------------------------
# Database (SQLite by default; switch to MySQL when env vars are present)
# Set any of MYSQL_DATABASE / DB_NAME / DJANGO_DATABASE_URL starting with mysql:// to enable MySQL.
# -----------------------------------
USE_MYSQL = bool(
    os.getenv("MYSQL_DATABASE")
    or os.getenv("DB_NAME")
    or os.getenv("DJANGO_DATABASE_URL", "").startswith("mysql://")
)

if USE_MYSQL:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.getenv("MYSQL_DATABASE", os.getenv("DB_NAME", "")),
            "USER": os.getenv("MYSQL_USER", os.getenv("DB_USER", "")),
            "PASSWORD": os.getenv("MYSQL_PASSWORD", os.getenv("DB_PASS", "")),
            "HOST": os.getenv("MYSQL_HOST", "localhost"),
            "PORT": os.getenv("MYSQL_PORT", "3306"),
            "OPTIONS": {
                "charset": "utf8mb4",
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            },
            "CONN_MAX_AGE": int(os.getenv("DJANGO_DB_CONN_MAX_AGE", "60")),  # persistent conns
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# -----------------------------------
# Password validation
# -----------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -----------------------------------
# Internationalization
# -----------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = os.getenv("DJANGO_TIME_ZONE", "UTC")
USE_I18N = True
USE_TZ = True

# -----------------------------------
# Static & media
# -----------------------------------
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'     # for collectstatic

# WhiteNoise compressed manifest storage (great for cPanel)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# -----------------------------------
# Default primary key field type
# -----------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -----------------------------------
# Production security hardening (only when DEBUG=False)
# -----------------------------------
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = int(os.getenv("DJANGO_SECURE_HSTS_SECONDS", "0"))  # set >0 after HTTPS is confirmed
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", "False").lower() == "true"
    SECURE_HSTS_PRELOAD = os.getenv("DJANGO_SECURE_HSTS_PRELOAD", "False").lower() == "true"
    SECURE_SSL_REDIRECT = os.getenv("DJANGO_SECURE_SSL_REDIRECT", "True").lower() == "true"
    SESSION_COOKIE_SAMESITE = os.getenv("DJANGO_SESSION_COOKIE_SAMESITE", "Lax")
    CSRF_COOKIE_SAMESITE = os.getenv("DJANGO_CSRF_COOKIE_SAMESITE", "Lax")
