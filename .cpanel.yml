deployment:
  tasks:
    - 'set -euo pipefail'
    - 'echo "===== cPanel deploy: $(date) ====="'
    - 'echo "PWD: $PWD"; echo "USER: $(whoami)"'
    - 'BRANCH=$(git rev-parse --abbrev-ref HEAD || true)'; - 'echo "BRANCH=$BRANCH"'

    - 'PYVER=3.10'
    - 'DEV_APP_ROOT=/home/kamranen/dev.backoffice'
    - 'PROD_APP_ROOT=/home/kamranen/backoffice'
    - 'DEV_VENV=/home/kamranen/virtualenv/dev.backoffice/$PYVER/bin/activate'
    - 'PROD_VENV=/home/kamranen/virtualenv/backoffice/$PYVER/bin/activate'

    - |
      case "$PWD" in
        */repositories/backoffice-dev)   TARGET="$DEV_APP_ROOT"; VENV="$DEV_VENV"; ENV_NAME="dev" ;;
        */repositories/backoffice-prod)  TARGET="$PROD_APP_ROOT"; VENV="$PROD_VENV"; ENV_NAME="prod" ;;
        *) echo "Unknown repo path ($PWD)"; exit 1 ;;
      esac
      echo "TARGET=$TARGET"; echo "VENV=$VENV"; echo "ENV=$ENV_NAME"

    - 'mkdir -p "$TARGET"'
    - 'RSYNC_BIN=$([ -x /bin/rsync ] && echo /bin/rsync || echo /usr/bin/rsync)'
    - |
      "$RSYNC_BIN" -a --delete \
        --exclude ".git" --exclude ".github" --exclude ".cpanel.yml" \
        --exclude "__pycache__" --exclude "node_modules" \
        --exclude "staticfiles" --exclude "media" \
        ./ "$TARGET/"

    # Optional: switch env file
    - '[ -f "$TARGET/.env.$ENV_NAME" ] && ln -sf "$TARGET/.env.$ENV_NAME" "$TARGET/.env" || true'

    # Install deps
    - 'source "$VENV"'
    - 'python -m pip install --upgrade pip wheel setuptools'
    - '[ -f "$TARGET/requirements.txt" ] && pip install -r "$TARGET/requirements.txt" || true'

    # Django tasks
    - 'cd "$TARGET"'
    - 'python manage.py migrate --noinput'
    - 'python manage.py collectstatic --noinput'
    - |
      if [ "$ENV_NAME" = "prod" ]; then
        python manage.py check --deploy || true
      fi

    # Restart Passenger
    - 'mkdir -p "$TARGET/tmp"'
    - 'touch "$TARGET/tmp/restart.txt"'
    - 'echo "===== deploy finished ====="'
