deployment:
  tasks:
    - 'set -euo pipefail'
    - 'echo "===== cPanel deploy: $(date) ====="'
    - 'echo "PWD: $PWD"; echo "USER: $(whoami)"'
    - 'BRANCH=$(git rev-parse --abbrev-ref HEAD || true)'
    - 'echo "BRANCH=$BRANCH"'

    # ---- paths & python version ----
    - 'PYVER=3.10'
    - 'DEV_APP_ROOT=/home/kamranen/backoffice_dev'
    - 'PROD_APP_ROOT=/home/kamranen/backoffice'
    - 'DEV_VENV=/home/kamranen/virtualenv/backoffice_dev/$PYVER/bin/activate'
    - 'PROD_VENV=/home/kamranen/virtualenv/backoffice/$PYVER/bin/activate'

    # ---- choose target based on repo path ----
    - |
      case "$PWD" in
        */repositories/backoffice-dev)
          TARGET="$DEV_APP_ROOT"; VENV="$DEV_VENV"; ENV_NAME="dev"
          ;;
        */repositories/backoffice-prod)
          TARGET="$PROD_APP_ROOT"; VENV="$PROD_VENV"; ENV_NAME="prod"
          ;;
        *)
          echo "Unknown repo path ($PWD). Expected backoffice-dev or backoffice-prod." >&2
          exit 1
          ;;
      esac
      echo "TARGET=$TARGET"; echo "VENV=$VENV"; echo "ENV=$ENV_NAME"

    # ---- prepare target; KEEP important files ----
    - 'mkdir -p "$TARGET" "$TARGET/media" "$TARGET/staticfiles" "$TARGET/tmp"'
    - 'echo "Cleaning TARGET (preserving media/staticfiles/tmp/.env*/passenger_wsgi.py/.htaccess)..."'
    - |
      find "$TARGET" -mindepth 1 -maxdepth 1 \
        ! -name media \
        ! -name staticfiles \
        ! -name tmp \
        ! -name ".env" \
        ! -name ".env.dev" \
        ! -name ".env.prod" \
        ! -name "passenger_wsgi.py" \
        ! -name ".htaccess" \
        -exec rm -rf {} +

    # ---- copy repo -> TARGET via tar ----
    - 'echo "Copying repo into TARGET..."'
    - |
      tar --exclude='.git' --exclude='.github' --exclude='.cpanel.yml' \
          --exclude='__pycache__' --exclude='node_modules' \
          --exclude='staticfiles' --exclude='media' \
          -cf - . | (cd "$TARGET" && tar -xf -)

    # ---- ensure passenger_wsgi.py exists ----
    - |
      if [ ! -f "$TARGET/passenger_wsgi.py" ]; then
        echo "passenger_wsgi.py missing; creating a default one..."
        cat > "$TARGET/passenger_wsgi.py" <<'PYWSGI'
        import os, sys, pathlib
        BASE_DIR = pathlib.Path(__file__).resolve().parent
        sys.path.insert(0, str(BASE_DIR))
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", os.getenv("DJANGO_SETTINGS_MODULE", "polyroll_mgmt.settings"))
        from django.core.wsgi import get_wsgi_application
        application = get_wsgi_application()
        PYWSGI
      fi

    # ---- switch env file (.env.dev/.env.prod) ----
    - '[ -f "$TARGET/.env.$ENV_NAME" ] && ln -sf "$TARGET/.env.$ENV_NAME" "$TARGET/.env" || true'

     # ---- fix permissions ----
    - 'chmod 0755 "$TARGET" || true'
    - 'chmod 755 "$TARGET/.htaccess" || true'
    - 'chmod -R u+rwX,go+rX "$TARGET/logs" "$TARGET/tmp" || true'
    
    # ---- install dependencies into cPanel venv ----
    - 'echo "Installing requirements into venv..."'
    - 'source "$VENV"'
    - 'python -m pip install --upgrade pip wheel setuptools'
    - 'if [ -f "$TARGET/requirements.txt" ]; then pip install -r "$TARGET/requirements.txt"; fi'

    # ---- Django housekeeping ----
    - 'cd "$TARGET"'
    - 'python manage.py migrate --noinput || true'
    - 'python manage.py collectstatic --noinput || true'
    - |
      if [ "$ENV_NAME" = "prod" ]; then
        echo "Running production checksâ€¦"
        python manage.py check --deploy || true
      fi

    # ---- restart Passenger ----
    - 'touch "$TARGET/tmp/restart.txt"'
    - 'echo "===== deploy finished ====="'