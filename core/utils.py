
from pathlib import Path
from decimal import Decimal, ROUND_HALF_UP
from django.conf import settings
from django.utils import timezone
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.units import mm
from datetime import date, datetime
from calendar import monthrange


from .models import Order, MaterialReceipt, Customer
from django.core.mail import EmailMessage
# ---- Optional: pull branding/settings from the singleton SiteSettings ----
try:
    from .utils_settings import get_site_settings
except Exception:
    # Fallback if utils_settings isn’t present
    def get_site_settings():
        return None
# ---- Customer Billing Monthly ----------

# -- Helpers ---
def _draw_page_header(c, W, H, ss):
    """
    Optional: if you want a small repeating header when a page breaks.
    Currently minimal; expand as needed.
    """
    margin = 15 * mm
    c.setFont("Helvetica-Bold", 11)
    company_name = (ss.company_name if ss and getattr(ss, "company_name", None) else getattr(settings, "COMPANY_NAME", "Your Company"))
    c.drawString(margin, H - margin + 5, company_name)

def _draw_footer(
    c,
    W,
    H,
    ss,
    *,
    payment_terms: str | None = None,
    bank_lines: list[str] | None = None,
    ref: str | None = None,
    user=None,
):
    """
    Footer layout (no overlap):
      Left (stacked, multi-line): Company name [+ payment terms] [+ bank details]
      Center (single line): Page N
      Right (single line): Generated by <user> · <timestamp> [· <ref>]

    The center/right line is automatically placed *below* the left block.
    """
    
    margin = 15 * mm

    # Who / company / stamp
    company_name = (
        ss.company_name
        if ss and getattr(ss, "company_name", None)
        else getattr(settings, "COMPANY_NAME", "Your Company")
    )
    who = "System"
    if user and getattr(user, "is_authenticated", False):
        who = (getattr(user, "get_full_name", lambda: "")() or
               getattr(user, "get_username", lambda: "")() or
               str(user)).strip() or "System"
    stamp = timezone.localtime().strftime("%Y-%m-%d %H:%M")
    page_no = c.getPageNumber()

    # -------- Left block (draw higher on the page) --------
    # Start higher so we have room to put the center/right line below it.
    left_top_y = 35 * mm  # raise/lower this as you like
    left_lines = [str(company_name)]
    if (payment_terms or "").strip():
        left_lines.append(f"Payment Terms: {payment_terms.strip()}")
    if bank_lines:
        left_lines.extend([str(x).strip() for x in bank_lines if str(x).strip()])

    # Draw multiline text left-aligned; returns the next Y (lower on page)
    left_end_y = _draw_multiline_left(
        c, left_lines, margin, left_top_y, leading=12, font="Helvetica", size=8.5
    )

    # -------- Center/Right single-line baseline (place it *below* left block) --------
    # Default baseline (safe low spot), but push even lower if the left block is tall
    default_baseline = 12 * mm
    # We want baseline to be *lower* than the bottom of the left block.
    # In ReportLab, a smaller Y is lower on the page.
    baseline = max(8 * mm, min(default_baseline, left_end_y - 2 * mm))

    c.setFont("Helvetica-Oblique", 8)
    # Center
    # c.drawCentredString(W / 4, baseline, f"Page {page_no}") # Uncomment if you want page no
    # Right
    right_txt = f"Generated by {who} · {stamp}"
    if ref:
        right_txt = f"{right_txt} · {ref}"
    c.drawRightString(W - margin, baseline, right_txt)

def _statement_path(customer: Customer, year: int, month: int) -> Path:
    base = Path(getattr(settings, "INVOICE_OUTPUT_DIR", "invoices"))
    base.mkdir(parents=True, exist_ok=True)
    safe_name = "".join(ch for ch in customer.company_name if ch.isalnum() or ch in (" ", "_", "-")).strip()
    return base / f"Statement-{safe_name}-{year:04d}-{month:02d}.pdf"

def _period_bounds(year: int, month: int):
    first = date(year, month, 1)
    last = date(year, month, monthrange(year, month)[1])
    # inclusive day bounds; use datetimes for ORM filters
    start_dt = datetime.combine(first, datetime.min.time(), tzinfo=timezone.get_current_timezone())
    end_dt = datetime.combine(last, datetime.max.time(), tzinfo=timezone.get_current_timezone())
    return start_dt, end_dt

def generate_customer_monthly_statement(customer_id: int, year: int, month: int, user=None) -> str:
    """
    Build a PDF "Final Bill" (monthly statement) for a customer:
      - Table 1: all non-draft orders in the month with outstanding > 0
      - Table 2: all MaterialReceipt entries in the month
    """
    customer = Customer.objects.get(id=customer_id)
    ss = get_site_settings()

    period_start, period_end = _period_bounds(year, month)

    # --- Orders in month with due amount > 0 (skip drafts) ---
    qs = (
        Order.objects.select_related("customer")
        .filter(customer=customer, order_date__range=(period_start, period_end))
        .exclude(status="DRAFT")
    )

    rows_orders = []
    grand_total_billed = Decimal("0")
    grand_total_due = Decimal("0")
    grand_total_qty = Decimal("0")

    for o in qs:
        size = getattr(o, "roll_size", "") or ""
        qty_kg = dkg(getattr(o, "target_total_kg", 0) or 0)
        rate = Decimal(str(getattr(o, "price_per_kg", 0) or 0))

        subtotal = dmoney(qty_kg * rate)

        if ss and ss.tax_rate is not None:
            tax_rate = Decimal(ss.tax_rate) / Decimal("100")
            tax_label = ss.tax_label or "Tax"
        else:
            tax_rate = Decimal(str(getattr(settings, "TAX_RATE", 0) or 0))
            tax_label = getattr(settings, "TAX_LABEL", "Tax")

        if getattr(ss, "include_gst", False):
            tax_amount = dmoney(subtotal * tax_rate) if tax_rate else Decimal("0.00")
        else:
            tax_amount = Decimal("0.00")

        bill_total = dmoney(subtotal + tax_amount)

        paid = dmoney(sum(Decimal(str(getattr(p, "amount", 0) or 0)) for p in o.payments.all()))
        due = dmoney(bill_total - paid)
        if due <= 0:
            continue

        grand_total_billed += bill_total
        grand_total_due += due
        grand_total_qty += qty_kg

        dc_no = getattr(o, "delivery_challan", "") or ""

        rows_orders.append([
            str(getattr(o, "delivery_challan_date", "") or ""),
            getattr(o, "invoice_number", f"INV{o.id}") or "",
            str(dc_no),
            str(size),
            f"{qty_kg:,.3f}",
            f"{rate:,.2f}",
            f"{bill_total:,.2f}",
            f"{due:,.2f}",
        ])

    rows_orders.append([
        "", "", "", "Grand Total",
        f"{grand_total_qty:,.3f}",
        "",
        f"{grand_total_billed:,.2f}",
        f"{grand_total_due:,.2f}",
    ])

    # --- Material received (IN) for the month ---
    rec_qs = (
        MaterialReceipt.objects
        .filter(customer=customer, date__range=(period_start, period_end))
        .order_by("date")
    )
    rows_receipts = []
    total_bags = 0
    total_kg = Decimal("0")
    for r in rec_qs:
        bags = int(getattr(r, "bags_count", 0) or 0)
        kg = dkg(getattr(r, "total_kg", 0) or 0)
        total_bags += bags
        total_kg += kg
        rows_receipts.append([
            str(getattr(r, "date", "") or ""),
            str(bags),
            f"{kg:,.3f}",
            getattr(r, "notes", "") or "",
        ])
    rows_receipts.append(["Total", str(total_bags), f"{total_kg:,.3f}", ""])

    # --- Common footer refs ---
    safe_name = "".join(ch for ch in customer.company_name if ch.isalnum() or ch in (" ", "_", "-")).strip()
    statement_ref = f"Statement-{safe_name}-{year:04d}-{month:02d}"
    bank_lines = (ss.bank_details_list if (ss and hasattr(ss, "bank_details_list"))
                  else getattr(settings, "BANK_DETAILS_LINES", []))

    # --- PDF build ---
    pdf_path = _statement_path(customer, year, month)
    c = canvas.Canvas(str(pdf_path), pagesize=A4)
    W, H = A4
    margin = 15 * mm
    right_x = W - margin
    top_y = H - margin

    # Header: logo + company block
    logo_path = None
    if ss and getattr(ss, "logo", None):
        try:
            logo_path = ss.logo.path
        except Exception:
            logo_path = None
    if not logo_path:
        lp = getattr(settings, "INVOICE_LOGO_PATH", "")
        logo_path = str(lp) if lp else None

    logo_w, logo_h = (38 * mm, 18 * mm)
    if logo_path:
        try:
            c.drawImage(ImageReader(logo_path), margin, top_y - logo_h,
                        width=logo_w, height=logo_h,
                        preserveAspectRatio=True, mask="auto")
        except Exception:
            pass

    company_name = (ss.company_name if ss and ss.company_name else getattr(settings, "COMPANY_NAME", "Your Company"))
    company_addr_lines = (
        ss.company_address_list if ss and hasattr(ss, "company_address_list")
        else getattr(settings, "COMPANY_ADDRESS_LINES", [])
    )
    header_lines = [company_name] + list(_as_lines(company_addr_lines))
    _draw_multiline_right(c, header_lines, right_x, top_y, leading=14, font="Helvetica", size=10)

    # Title
    title_y = top_y - (logo_h + 35 if logo_path else 55)
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(W/2, title_y, "Customer Monthly Statement")

    # Meta
    meta_y = title_y - 26
    c.setFont("Helvetica", 10)
    c.drawCentredString(W/2, meta_y, f"{customer.company_name}   |   Period: {year:04d}-{month:02d}")
    y = meta_y - 24

    # --- Table 1 ---
    c.setFont("Helvetica-Bold", 12)
    c.drawString(margin, y, "Unpaid / Due Invoices")
    y -= 12

    orders_table_data = [[
        "Date", "Invoice #", "DC #", "Size", "Total Qty (kg)", "Rate", "Bill Total", "Amount Due"
    ]] + (rows_orders or [["—"] * 8])

    orders_base_cols = [70, 85, 50, 50, 85, 55, 80, 85]
    avail = W - 2 * margin
    scale = min(1.0, avail / float(sum(orders_base_cols)))
    orders_col_widths = [w * scale for w in orders_base_cols]

    t1 = Table(orders_table_data, colWidths=orders_col_widths, repeatRows=1)
    t1.setStyle(TableStyle([
        ("GRID", (0, 0), (-1, -2), 0.5, colors.black),
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("FONTNAME", (0, -1), (-1, -1), "Helvetica-Bold"),
        ("BACKGROUND", (0, -1), (-1, -1), colors.lightgrey),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
    ]))

    tw, th = t1.wrapOn(c, W, H)
    x_center = (W - tw) / 2.0
    if y - th < 90:
        _draw_footer(c, W, H, ss, bank_lines=bank_lines, ref=statement_ref, user=user)
        c.showPage()
        _draw_page_header(c, W, H, ss)
        y = H - margin
    t1.drawOn(c, x_center, y - th)
    y = y - th - 30

    # --- Table 2 ---
    if y < 120:
        _draw_footer(c, W, H, ss, bank_lines=bank_lines, ref=statement_ref, user=user)
        c.showPage()
        _draw_page_header(c, W, H, ss)
        y = H - margin

    c.setFont("Helvetica-Bold", 12)
    c.drawString(margin, y, "Raw Material Received (IN)")
    y -= 12

    rec_table = [["Date", "Bags", "Total (kg)", "Notes"]] + (rows_receipts or [["—"] * 4])
    rec_base_cols = [110, 55, 75, 240]
    avail = W - 2 * margin
    scale = min(1.0, avail / float(sum(rec_base_cols)))
    rec_col_widths = [w * scale for w in rec_base_cols]

    t2 = Table(rec_table, colWidths=rec_col_widths, repeatRows=1)
    t2.setStyle(TableStyle([
        ("GRID", (0, 0), (-1, -2), 0.5, colors.black),
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("FONTNAME", (0, -1), (-1, -1), "Helvetica-Bold"),
        ("BACKGROUND", (0, -1), (-1, -1), colors.lightgrey),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
    ]))

    tw, th = t2.wrapOn(c, W, H)
    x_center = (W - tw) / 2.0
    if y - th < 90:
        _draw_footer(c, W, H, ss, bank_lines=bank_lines, ref=statement_ref, user=user)
        c.showPage()
        _draw_page_header(c, W, H, ss)
        y = H - margin
    t2.drawOn(c, x_center, y - th)
    y = y - th - 30

    # --- Final footer ---
    _draw_footer(c, W, H, ss, bank_lines=bank_lines, ref=statement_ref, user=user)

    c.save()
    return str(pdf_path)


# ---- End Customer Billing Monthly ------

# ---- Small helpers -------------------------------------------------------
def dmoney(val: Decimal) -> Decimal:
    """Money decimal with 2dp."""
    if val is None:
        val = Decimal("0")
    return Decimal(val).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

def dkg(val: Decimal) -> Decimal:
    """Kilograms with 3dp."""
    if val is None:
        val = Decimal("0")
    return Decimal(val).quantize(Decimal("0.001"), rounding=ROUND_HALF_UP)

def _format_money(val: Decimal) -> str:
    return f"{dmoney(val):,.2f}"

def _invoice_path(order: Order) -> Path:
    inv_no = order.invoice_number or f"SSP{order.id:05d}"
    base = Path(getattr(settings, "INVOICE_OUTPUT_DIR", "invoices"))
    base.mkdir(parents=True, exist_ok=True)
    return base / f"{inv_no}.pdf"

def _as_lines(text_or_list):
    """Accept list[str] or newline-separated string; return list[str]."""
    if not text_or_list:
        return []
    if isinstance(text_or_list, (list, tuple)):
        return [str(x).strip() for x in text_or_list if str(x).strip()]
    # string
    return [ln.strip() for ln in str(text_or_list).splitlines() if ln.strip()]

def _draw_multiline_left(c, lines, x, y, leading=12, font="Helvetica", size=9):
    c.setFont(font, size)
    cur_y = y
    for ln in _as_lines(lines):
        c.drawString(x, cur_y, ln)
        cur_y -= leading
    return cur_y

def _draw_multiline_right(c, lines, x_right, y, leading=12, font="Helvetica", size=9):
    c.setFont(font, size)
    cur_y = y
    for ln in _as_lines(lines):
        c.drawRightString(x_right, cur_y, ln)
        cur_y -= leading
    return cur_y

def _as_decimal(x):
    # robust coercion
    try:
        return Decimal(str(x))
    except Exception:
        return Decimal("0")
def _draw_status_stamp(c, text, rgb_hex, W, H):
    """
    Draw a large rotated status stamp centered on the page.
    rgb_hex: like '#22c55e'.
    """
    c.saveState()
    # Convert hex -> reportlab color
    col = colors.HexColor(rgb_hex)

    # Put stamp across center, rotated a bit
    c.translate(W/2, H/2)
    c.rotate(30)

    # Big label
    c.setStrokeColor(col)
    c.setFillColor(col)
    c.setLineWidth(3)

    # Choose a big bold font size that scales well
    stamp_font = "Helvetica-Bold"
    font_size = 46
    c.setFont(stamp_font, font_size)

    # Center the text manually
    txt_w = c.stringWidth(text, stamp_font, font_size)
    c.drawString(-txt_w/2, -10, text)

    # Optional: a thin rectangle behind text (subtle highlight)
    # Commented out to keep it clean
    # c.setFillColor(colours.whitesmoke)
    # c.rect(-txt_w/2 - 10, -20, txt_w + 20, 40, stroke=0, fill=1)

    c.restoreState()
# ---- Main: generate_invoice ----------------------------------------------
def generate_invoice(order_id, user=None, out_path=None):
    """
    Invoice bills by target weight (price_per_kg * target_weight_kg).
    Produced rolls are shown as a simple list under the single summary row.
    Works whether rolls are accessible via order.rolls or order.orderroll_set.
    """
    # --- Load order + related ---
    order = (
        Order.objects
        .select_related("customer")
        .prefetch_related("payments")   # no line-items anymore
        .get(id=order_id)
    )

    # Try to also prefetch rolls without importing the model
    rolls_mgr = getattr(order, 'rolls', None) or getattr(order, 'orderroll_set', None)
    rolls = list(rolls_mgr.all()) if callable(getattr(rolls_mgr, 'all', None)) else []

    # --- Site settings / branding ---
    ss = get_site_settings()

    # Invoice number & pdf path
    inv_no = order.invoice_number or f"Invoice-SSP-{order.id:05d}"
    pdf_path = Path(out_path) if out_path else _invoice_path(order)

    # --- Material balances on the PDF ---
    def _dec_attr(obj, name, default=Decimal("0")) -> Decimal:
        val = getattr(obj, name, default)
        if callable(val):  # handle methods or cached properties
            val = val()
        try:
            return Decimal(str(val))
        except Exception:
            return Decimal("0")
    
    before_balance = dkg(_dec_attr(order.customer, "material_balance_kg"))

    # your project sometimes calls it target_total_kg; fall back to target_weight_kg
    target_kg_raw = _dec_attr(order, "target_total_kg") or _dec_attr(order, "target_weight_kg")
    target_kg = dkg(target_kg_raw)

    status = (getattr(order, "status", "") or "").upper()
    if status in {"CONFIRMED", "INPROD", "CLOSED"}:
        after_balance = dkg(before_balance - target_kg)
    else:
        after_balance = before_balance

    # --- Pricing (bill on target) ---
    price_per_kg = dmoney(_dec_attr(order, "price_per_kg"))
    # multiply first, then money-quantize to 2dp
    subtotal = dmoney(target_kg * price_per_kg)

    # Tax (prefer SiteSettings’ percentage like 17.00)
    tax_rate = Decimal("0")
    tax_label = "Tax"
    if getattr(order, "include_gst", True):
        if ss and ss.tax_rate is not None:
            tax_rate = (Decimal(ss.tax_rate) / Decimal("100"))  # e.g. 17.00 => 0.17
            tax_label = ss.tax_label or "Tax"
        else:
            tax_rate = Decimal(str(getattr(settings, "TAX_RATE", 0) or 0))
            tax_label = getattr(settings, "TAX_LABEL", "Tax")

    tax_amount = dmoney(subtotal * tax_rate) if tax_rate else Decimal("0.00")
    grand_total = dmoney(subtotal + tax_amount)

    # Payments
    payments = list(order.payments.all().order_by("payment_date"))
    amount_paid = dmoney(sum(_as_decimal(getattr(p, "amount", 0)) for p in payments))
    balance_due = dmoney(grand_total - amount_paid)
    # ---- STATUS STAMP (color-coded) ----
    # Priority:
    # 1) PAID (green)
    # 2) OVERDUE (red) if delivery_date < today and still due
    # 3) PARTIALLY PAID (yellow) if some paid but not all
    # 4) PENDING (blue) otherwise


    status_text = None
    status_color = None

    if balance_due == Decimal("0.00"):
        status_text = "FULLY PAID"
        status_color = "#22c55e"  # green
    else:
        # overdue check
        is_overdue = False
        try:
            if order.delivery_date and order.delivery_date < date.today():
                is_overdue = True
        except Exception:
            is_overdue = False

        if is_overdue:
            status_text = "OVERDUE"
            status_color = "#ef4444"  # red
        elif amount_paid > Decimal("0.00"):
            status_text = "PARTIALLY PAID"
            status_color = "#f59e0b"  # yellow
        # elif order.status == "Cancelled"
        #         status_text = "Cancelled"
        #         status_color = "#ef4444"  # red
        else:
            status_text = "PENDING"
            status_color = "#3b82f6"  # blue

    # Draw it on the first page only (we’re currently on the last page canvas;
    # this still draws on whatever page you’re on at this point—which is OK since your invoice is typically 1–2 pages).
    # If you want ONLY page 1, draw immediately after creating the canvas before you paginate items.
    
    # --- PDF setup ---
    c = canvas.Canvas(str(pdf_path), pagesize=A4)
    c.setTitle(inv_no)
    W, H = A4
    margin = 15 * mm
    top_y = H - margin
    right_x = W - margin
    _draw_status_stamp(c, status_text, status_color, W, H)
    # Header: logo + company block
    logo_path = None
    if ss and getattr(ss, "logo", None):
        try:
            logo_path = ss.logo.path
        except Exception:
            logo_path = None
    if not logo_path:
        lp = getattr(settings, "INVOICE_LOGO_PATH", "")
        logo_path = str(lp) if lp else None

    logo_w, logo_h = (38 * mm, 18 * mm)
    if logo_path:
        try:
            c.drawImage(ImageReader(logo_path), margin, top_y - logo_h, width=logo_w, height=logo_h,
                        preserveAspectRatio=True, mask="auto")
        except Exception:
            pass

    company_name = (ss.company_name if ss and ss.company_name else getattr(settings, "COMPANY_NAME", "Your Company"))
    company_addr_lines = (
        ss.company_address_list if ss and hasattr(ss, "company_address_list")
        else getattr(settings, "COMPANY_ADDRESS_LINES", [])
    )
    _draw_multiline_right(c, [company_name] + list(_as_lines(company_addr_lines)),
                          right_x, top_y, leading=14, font="Helvetica", size=10)

    # Center title + meta
    title_y = top_y - (logo_h + 35 if logo_path else 55)
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(W / 2, title_y, "INVOICE")

    meta_y = title_y - 28
    c.setFont("Helvetica", 10)
    c.drawCentredString(
        W / 2, meta_y,
        f"Invoice No: {inv_no}    |    Order Date: {order.order_date}    |    Delivery Date: {order.delivery_date}"
    )

    # Customer (centered block)
    cust = order.customer
    cust_y = meta_y - 35
    cust_lines = [f"Bill To: {cust.company_name}"]
    if getattr(cust, "contact_name", ""): cust_lines.append(f"Attn: {cust.contact_name}")
    if getattr(cust, "address", ""):      cust_lines.append(cust.address)
    if getattr(cust, "phone", ""):        cust_lines.append(f"Phone: {cust.phone}")
    if getattr(cust, "email", ""):        cust_lines.append(f"Email: {cust.email}")

    c.setFont("Helvetica", 10)
    y = cust_y
    for ln in cust_lines:
        c.drawCentredString(W / 2, y, ln)
        y -= 14

    # --- SUMMARY TABLE (one row: category/size) ---
    table_top_y = y - 16
    size_val = getattr(order, "size", getattr(order, "roll_size", ""))
    micron_val = getattr(order, "micron", "")

    data = [["Size", "Micron", "Target Weight (kg)", "Price/Kg", "Line Total"]]
    data.append([
        str(size_val),
        str(micron_val),
        f"{target_kg:,.3f}",
        _format_money(price_per_kg),
        _format_money(subtotal),
    ])

    from reportlab.platypus import Table, TableStyle
    from reportlab.lib import colors

    col_widths = [140, 80, 120, 90, 95]
    tbl = Table(data, colWidths=col_widths, repeatRows=1)
    tbl.setStyle(TableStyle([
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("FONTSIZE", (0, 0), (-1, 0), 10),
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#e9eef6")),
        ("ALIGN", (0, 0), (-1, 0), "CENTER"),

        ("FONTNAME", (0, 1), (-1, -1), "Helvetica"),
        ("FONTSIZE", (0, 1), (-1, -1), 9),
        ("ALIGN", (0, 1), (-1, -1), "CENTER"),

        ("GRID", (0, 0), (-1, -1), 0.25, colors.grey),
        ("BOX", (0, 0), (-1, -1), 0.5, colors.grey),
    ]))

    avail_height = table_top_y - 160  # leave room for rolls list + totals
    tw, th = tbl.wrapOn(c, W - 2 * margin, avail_height)
    y_cursor = table_top_y
    tbl.drawOn(c, margin, y_cursor - th)
    y_cursor = y_cursor - th - 14

    # --- ROLL WEIGHTS LIST (under the summary row) ---
    c.setFont("Helvetica-Bold", 10)
    c.drawString(margin, y_cursor, "Roll Weights:")
    y_cursor -= 14
    c.setFont("Helvetica", 9)

    if rolls:
        # List as "1) 12.345 kg   2) 11.990 kg   ..."
        # Wrap into multiple lines if needed
        numbers = []
        for idx, r in enumerate(rolls, start=1):
            w = dkg(_as_decimal(getattr(r, 'weight_kg', 0)))
            numbers.append(f"{idx}) {w:,.3f} kg")
        line = ""
        x = margin + 10
        y_line = y_cursor
        for token in numbers:
            try_w = c.stringWidth(line + ("" if not line else "   ") + token, "Helvetica", 9)
            if x + try_w > (W - margin):
                # draw current line and wrap
                c.drawString(x, y_line, line)
                y_line -= 12
                line = token
            else:
                line = token if not line else f"{line}   {token}"
        if line:
            c.drawString(x, y_line, line)
            y_line -= 12
        y_cursor = y_line - 4
    else:
        c.drawString(margin + 10, y_cursor, "—")
        y_cursor -= 12

    # --- TOTALS (right) ---
    totals_x_right = W - margin
    totals_y = max(110, y_cursor - 6)

    c.setFont("Helvetica-Bold", 11)
    c.drawRightString(totals_x_right - 85, totals_y, "Subtotal:")
    c.drawRightString(totals_x_right, totals_y, _format_money(subtotal))

    # Tax (only if > 0)
    if tax_rate and tax_amount > 0:
        c.setFont("Helvetica", 10)
        totals_y -= 14
        percent = (tax_rate * Decimal("100")).quantize(Decimal("0.01"))
        c.drawRightString(totals_x_right - 85, totals_y, f"{tax_label} ({percent}%):")
        c.drawRightString(totals_x_right, totals_y, _format_money(tax_amount))

    c.setFont("Helvetica-Bold", 12)
    totals_y -= 18
    c.drawRightString(totals_x_right - 85, totals_y, "Grand Total:")
    c.drawRightString(totals_x_right, totals_y, _format_money(grand_total))

    c.setFont("Helvetica", 10)
    totals_y -= 16
    c.drawRightString(totals_x_right - 85, totals_y, "Amount Paid:")
    c.drawRightString(totals_x_right, totals_y, _format_money(amount_paid))

    c.setFont("Helvetica-Bold", 12)
    totals_y -= 18
    c.drawRightString(totals_x_right - 85, totals_y, "Balance Due:")
    c.drawRightString(totals_x_right, totals_y, _format_money(balance_due))


    # Material balances (left)
    c.setFont("Helvetica", 9)
    c.drawString(margin, totals_y, f"Polyethylene Bags Balance: {before_balance:,.3f} kg")
    # totals_y -= 14
    # c.drawString(margin, totals_y, f"Material Balance (after this order): {after_balance:,.3f} kg")

    # Payments mini list
    py_y = totals_y - 20
    if payments:
        c.setFont("Helvetica-Bold", 10)
        c.drawString(margin, py_y, "Payments:")
        py_y -= 14
        c.setFont("Helvetica", 9)
        for p in payments:
            row = f"{p.payment_date}  ·  {getattr(p, 'method', '') or ''}  ·  {_format_money(_as_decimal(getattr(p,'amount',0)))}"
            c.drawString(margin + 10, py_y, row)
            py_y -= 12

    # Footer: payment terms + bank
    footer_y = 60
    billing_lines = ["Payment Terms: " + (getattr(order, "payment_terms", "") or "")]
    if ss and hasattr(ss, "bank_details_list"):
        bank_lines = ss.bank_details_list
    else:
        bank_lines = getattr(settings, "BANK_DETAILS_LINES", [])

    _draw_multiline_left(c, billing_lines, margin, footer_y + 28, leading=12, font="Helvetica", size=9)
    _draw_multiline_left(c, bank_lines,   margin, footer_y,        leading=12, font="Helvetica", size=9)

    # Footer stamp
    who = "System"
    if user and getattr(user, "is_authenticated", False):
        who = (user.get_full_name() or user.get_username() or str(user)).strip() or "System"
    stamp = timezone.localtime().strftime("%Y-%m-%d %H:%M")
    c.setFont("Helvetica-Oblique", 8)
    c.drawRightString(W - margin, 30, f"Generated by {who} · {stamp} · {inv_no}")

    c.save()
    return str(pdf_path)


def send_invoice_email(order_id, pdf_path, to_email=None, subject=None, body=None):
    """
    Emails the invoice PDF to the customer's email (or an override).
    - order_id: int
    - pdf_path: str or Path to the PDF file to attach
    - to_email: optional override recipient (default: order.customer.email)
    - subject/body: optional customizations
    """
    order = Order.objects.get(id=order_id)
    pdf_path = str(Path(pdf_path))  # normalize

    recipient = to_email or (order.customer.email or "").strip()
    if not recipient:
        raise ValueError("Customer has no email address. Please add an email to the Customer record.")

    # From/sender
    from_email = getattr(settings, "DEFAULT_FROM_EMAIL", None) or getattr(settings, "EMAIL_HOST_USER", None)
    if not from_email:
        raise ValueError(
            "Email sender not configured. Set DEFAULT_FROM_EMAIL or EMAIL_HOST_USER in settings.py."
        )

    # Subject/body defaults
    inv_no = order.invoice_number or f"INV{order.id}"
    subject = subject or f"Invoice {inv_no}"
    customer_name = order.customer.contact_name or order.customer.company_name or "Customer"
    company_name = getattr(settings, "COMPANY_NAME", "S.S Plastic")
    body = body or (
        f"Dear {customer_name},\n\n"
        f"Please find attached your invoice {inv_no}.\n\n"
        f"Thank you,\n{company_name}"
    )

    email = EmailMessage(
        subject=subject,
        body=body,
        from_email=from_email,
        to=[recipient],
    )
    email.attach_file(pdf_path)
    # Will raise helpful exceptions if SMTP isn’t configured correctly
    email.send(fail_silently=False)
    return True