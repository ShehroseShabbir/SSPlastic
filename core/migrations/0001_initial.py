# Generated by Django 5.2.5 on 2025-08-31 08:44

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('contact_name', models.CharField(blank=True, max_length=255)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('previous_pending_balance_pkr', models.IntegerField(default=0, help_text='Initial carry-forward (once). In whole rupees.')),
                ('pending_balance_pkr', models.IntegerField(default=0, help_text='Auto: carry + final orders âˆ’ payments (int PKR).')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('cnic', models.CharField(blank=True, max_length=20)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('salary', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('join_date', models.DateField(blank=True, null=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('contract_end_date', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='employees/photos/')),
                ('contract_file', models.FileField(blank=True, null=True, upload_to='employees/contracts/')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Expense Categories',
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, default='', max_length=255)),
                ('company_address', models.TextField(blank=True, default='')),
                ('bank_details', models.TextField(blank=True, default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='branding/')),
                ('tax_label', models.CharField(blank=True, default='GST', max_length=20)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('email_backend', models.CharField(blank=True, default='', help_text='e.g. django.core.mail.backends.smtp.EmailBackend', max_length=200)),
                ('email_host', models.CharField(blank=True, default='', max_length=200)),
                ('email_port', models.PositiveIntegerField(blank=True, null=True)),
                ('email_use_tls', models.BooleanField(default=True)),
                ('email_host_user', models.CharField(blank=True, default='', max_length=200)),
                ('email_host_password', models.CharField(blank=True, default='', help_text='Consider env vars instead of storing here.', max_length=200)),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('amount', models.BigIntegerField()),
                ('expense_date', models.DateField(default=django.utils.timezone.now)),
                ('period', models.CharField(choices=[('ONCE', 'One-time'), ('MONTHLY', 'Monthly'), ('YEARLY', 'Yearly')], default='ONCE', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='expenses/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expenses', to='core.expensecategory')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of Material Received')),
                ('bags_count', models.PositiveIntegerField(default=0)),
                ('extra_kg', models.DecimalField(decimal_places=3, default=0, max_digits=10)),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_receipts', to='core.customer')),
            ],
            options={
                'verbose_name': 'Material Receipt',
                'verbose_name_plural': 'Material Receipts',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('CONFIRMED', 'Confirmed'), ('INPROD', 'In Production'), ('READY', 'Ready for Shipping'), ('DELIVERED', 'Delivered'), ('CLOSED', 'Closed')], default='DRAFT', max_length=12)),
                ('order_date', models.DateField(auto_now_add=True)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('payment_terms', models.CharField(blank=True, choices=[('NET7', 'Net 7'), ('NET14', 'Net 14'), ('NET30', 'Net 30'), ('NET45', 'Net 45'), ('NET60', 'Net 60'), ('NET90', 'Net 90')], max_length=20)),
                ('include_gst', models.BooleanField(default=False, help_text='Include GST for this order')),
                ('delivery_challan', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('delivery_challan_date', models.DateField(blank=True, null=True)),
                ('roll_size', models.CharField(default=0, max_length=50)),
                ('micron', models.CharField(choices=[('20/40', '20/40'), ('22/44', '22/44'), ('25/50', '25/50'), ('28/56', '28/56'), ('30/60', '30/60'), ('32/65', '32/65'), ('35/70', '35/70'), ('37/75', '37/75'), ('40/80', '40/80'), ('42/85', '42/85'), ('45/90', '45/90'), ('47/95', '47/95'), ('50/100', '50/100'), ('52/105', '52/105'), ('55/110', '55/110'), ('57/115', '57/115'), ('60/120', '60/120'), ('62/125', '62/125'), ('65/130', '65/130'), ('67/135', '67/135'), ('70/140', '70/140'), ('72/145', '72/145'), ('75/150', '75/150'), ('77/155', '77/155'), ('80/160', '80/160'), ('82/165', '82/165'), ('85/170', '85/170'), ('87/175', '87/175'), ('90/180', '90/180'), ('100/200', '100/200')], help_text='Select micron from the list.', max_length=10, null=True)),
                ('current_type', models.CharField(choices=[('NT', 'NT'), ('DT', 'DT'), ('ST', 'ST')], max_length=10, null=True)),
                ('target_total_kg', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=12)),
                ('material_deducted', models.BooleanField(default=False)),
                ('price_per_kg', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('invoice_number', models.CharField(blank=True, help_text='Automatically generated do not edit', max_length=50, null=True, unique=True)),
                ('tolerance_kg', models.DecimalField(decimal_places=3, default=Decimal('0.500'), help_text='Allowed diff between produced and target at READY/DELIVERED/CLOSED', max_digits=6)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roll_size', models.FloatField()),
                ('micron', models.CharField(max_length=10)),
                ('current_type', models.CharField(choices=[('NT', 'NT'), ('DT', 'DT'), ('ST', 'ST')], max_length=2)),
                ('roll_weight', models.FloatField()),
                ('quantity', models.IntegerField()),
                ('price_per_kg', models.FloatField()),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderRoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_kg', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('barcode', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rolls', to='core.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('received_on', models.DateField(default=django.utils.timezone.now)),
                ('method', models.CharField(choices=[('CASH', 'Cash'), ('CHEQUE', 'Cheque'), ('TRANSFER', 'Bank Transfer'), ('OTHER', 'Other')], default='TRANSFER', max_length=20)),
                ('bank', models.CharField(blank=True, choices=[('HBL', 'HBL'), ('MCB Bank', 'MCB Bank'), ('UBL', 'UBL'), ('National Bank of Pakistan (NBP)', 'National Bank of Pakistan (NBP)'), ('Allied Bank', 'Allied Bank'), ('Standard Chartered Bank Pakistan', 'Standard Chartered Bank Pakistan'), ('Bank Alfalah', 'Bank Alfalah'), ('Bank Al Habib', 'Bank Al Habib'), ('Meezan Bank', 'Meezan Bank'), ('Faysal Bank', 'Faysal Bank'), ('Habib Metropolitan Bank', 'Habib Metropolitan Bank'), ('Askari Bank', 'Askari Bank'), ('JS Bank', 'JS Bank'), ('Summit Bank', 'Summit Bank'), ('Sindh Bank', 'Sindh Bank'), ('The Bank of Punjab (BOP)', 'The Bank of Punjab (BOP)'), ('First Women Bank', 'First Women Bank'), ('Soneri Bank', 'Soneri Bank'), ('Silkbank', 'Silkbank'), ('Dubai Islamic Bank Pakistan', 'Dubai Islamic Bank Pakistan'), ('Al Baraka Bank', 'Al Baraka Bank'), ('Bank Islami Pakistan', 'Bank Islami Pakistan'), ('ICBC Pakistan', 'ICBC Pakistan'), ('Samba Bank', 'Samba Bank'), ('Zarai Taraqiati Bank Limited (ZTBL)', 'Zarai Taraqiati Bank Limited (ZTBL)'), ('Khushhali Microfinance Bank', 'Khushhali Microfinance Bank'), ('EasyPaisa', 'EasyPaisa'), ('JazzCash', 'JazzCash'), ('NayaPay', 'NayaPay'), ('SadaPay', 'SadaPay'), ('UPaisa', 'UPaisa'), ('HBL Konnect', 'HBL Konnect'), ('U Microfinance Bank', 'U Microfinance Bank'), ('Mobilink Microfinance Bank', 'Mobilink Microfinance Bank'), ('Telenor Microfinance Bank', 'Telenor Microfinance Bank')], max_length=50)),
                ('reference', models.CharField(blank=True, max_length=64)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_ar', to='core.customer')),
            ],
            options={
                'verbose_name': 'Receive Payment',
                'verbose_name_plural': 'Receive Payments',
                'ordering': ['-received_on', '-id'],
            },
        ),
        migrations.CreateModel(
            name='RawMaterialTxn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('PURCHASE', 'Purchase (into Company Stock)'), ('SALE', 'Sell from Company Stock to Customer'), ('TRANSFER', 'Customer â†’ Customer transfer')], default='PURCHASE', max_length=12)),
                ('when', models.DateField(default=django.utils.timezone.localdate)),
                ('supplier_name', models.CharField(blank=True, max_length=200)),
                ('qty_kg', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('rate_pkr', models.BigIntegerField(default=0, help_text='Rate per kg (PKR, whole rupees).', validators=[django.core.validators.MinValueValidator(0)])),
                ('amount_pkr', models.BigIntegerField(default=0, help_text='Total amount in PKR (ints).', validators=[django.core.validators.MinValueValidator(0)])),
                ('material_type', models.CharField(choices=[('FILM', 'Film'), ('TAPE', 'Tape')], default='FILM', max_length=10)),
                ('bags_count', models.PositiveIntegerField(default=0, help_text='Each bag = 25 kg.')),
                ('dc_number', models.CharField(blank=True, help_text='Delivery challan / reference.', max_length=50)),
                ('memo', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rm_created', to=settings.AUTH_USER_MODEL)),
                ('from_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rm_out_txns', to='core.customer')),
                ('to_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rm_in_txns', to='core.customer')),
            ],
            options={
                'verbose_name': 'Raw Material Transaction',
                'verbose_name_plural': 'Raw Material Transactions',
                'ordering': ['-when', '-id'],
                'permissions': [('can_manage_material_trades', 'Can manage raw-material purchases/sales/transfers')],
            },
        ),
        migrations.CreateModel(
            name='SalaryPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_month', models.PositiveSmallIntegerField()),
                ('period_year', models.PositiveIntegerField()),
                ('gross_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('paid_amount', models.BigIntegerField()),
                ('payment_date', models.DateField(default=django.utils.timezone.now)),
                ('method', models.CharField(blank=True, default='Cash', max_length=40)),
                ('notes', models.TextField(blank=True)),
                ('slip', models.FileField(blank=True, null=True, upload_to='employees/salary_slips/')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_payments', to='core.employee')),
            ],
            options={
                'ordering': ['-period_year', '-period_month'],
            },
        ),
        migrations.CreateModel(
            name='SupplierPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_name', models.CharField(max_length=200)),
                ('paid_on', models.DateField(default=django.utils.timezone.localdate)),
                ('method', models.CharField(choices=[('CASH', 'Cash'), ('CHEQUE', 'Cheque'), ('TRANSFER', 'Bank Transfer'), ('OTHER', 'Other')], default='TRANSFER', max_length=20)),
                ('bank', models.CharField(blank=True, choices=[('HBL', 'HBL'), ('MCB Bank', 'MCB Bank'), ('UBL', 'UBL'), ('National Bank of Pakistan (NBP)', 'National Bank of Pakistan (NBP)'), ('Allied Bank', 'Allied Bank'), ('Standard Chartered Bank Pakistan', 'Standard Chartered Bank Pakistan'), ('Bank Alfalah', 'Bank Alfalah'), ('Bank Al Habib', 'Bank Al Habib'), ('Meezan Bank', 'Meezan Bank'), ('Faysal Bank', 'Faysal Bank'), ('Habib Metropolitan Bank', 'Habib Metropolitan Bank'), ('Askari Bank', 'Askari Bank'), ('JS Bank', 'JS Bank'), ('Summit Bank', 'Summit Bank'), ('Sindh Bank', 'Sindh Bank'), ('The Bank of Punjab (BOP)', 'The Bank of Punjab (BOP)'), ('First Women Bank', 'First Women Bank'), ('Soneri Bank', 'Soneri Bank'), ('Silkbank', 'Silkbank'), ('Dubai Islamic Bank Pakistan', 'Dubai Islamic Bank Pakistan'), ('Al Baraka Bank', 'Al Baraka Bank'), ('Bank Islami Pakistan', 'Bank Islami Pakistan'), ('ICBC Pakistan', 'ICBC Pakistan'), ('Samba Bank', 'Samba Bank'), ('Zarai Taraqiati Bank Limited (ZTBL)', 'Zarai Taraqiati Bank Limited (ZTBL)'), ('Khushhali Microfinance Bank', 'Khushhali Microfinance Bank'), ('EasyPaisa', 'EasyPaisa'), ('JazzCash', 'JazzCash'), ('NayaPay', 'NayaPay'), ('SadaPay', 'SadaPay'), ('UPaisa', 'UPaisa'), ('HBL Konnect', 'HBL Konnect'), ('U Microfinance Bank', 'U Microfinance Bank'), ('Mobilink Microfinance Bank', 'Mobilink Microfinance Bank'), ('Telenor Microfinance Bank', 'Telenor Microfinance Bank')], max_length=50)),
                ('reference', models.CharField(blank=True, max_length=64)),
                ('amount_pkr', models.BigIntegerField(help_text='Whole PKR (no decimals).', validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplier_payments_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Supplier Payment',
                'verbose_name_plural': 'Supplier Payments',
                'ordering': ['-paid_on', '-id'],
            },
        ),
        migrations.CreateModel(
            name='RawMaterialPurchasePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(blank=True, max_length=120)),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_payments', to='core.rawmaterialtxn')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_material_links', to='core.supplierpayment')),
            ],
            options={
                'verbose_name': 'Purchase â†” Supplier Payment Link',
                'verbose_name_plural': 'Purchase â†” Supplier Payment Links',
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('P', 'Present'), ('A', 'Absent'), ('L', 'Leave'), ('H', 'Half Day')], default='P', max_length=1)),
                ('hours_worked', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='core.employee')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('employee', 'date')},
            },
        ),
        migrations.CreateModel(
            name='CustomerMaterialLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('IN', 'In'), ('OUT', 'Out')], max_length=3)),
                ('delta_kg', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=12)),
                ('memo', models.CharField(blank=True, max_length=255)),
                ('material_type', models.CharField(blank=True, choices=[('FILM', 'Film'), ('TAPE', 'Tape')], max_length=10)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_ledger', to='core.customer')),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.materialreceipt')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='material_ledger_entries', to='core.order')),
            ],
            options={
                'verbose_name': 'Ledger',
                'verbose_name_plural': 'Ledgers',
                'constraints': [models.UniqueConstraint(condition=models.Q(('type', 'OUT')), fields=('order', 'type'), name='uniq_out_per_order')],
            },
        ),
        migrations.CreateModel(
            name='PaymentAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.BigIntegerField(default=0)),
                ('applied_on', models.DateField(default=django.utils.timezone.now)),
                ('rounding_pkr', models.IntegerField(default=0, help_text='Small +/- write-off used to settle the order (Â± few rupees).')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_allocations', to='core.order')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='core.payment')),
            ],
            options={
                'verbose_name': 'Payments Ledger',
                'verbose_name_plural': 'Payments Ledger',
                'unique_together': {('payment', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='rawmaterialtxn',
            index=models.Index(fields=['kind', 'when'], name='core_rawmat_kind_a20dce_idx'),
        ),
        migrations.AddIndex(
            model_name='rawmaterialtxn',
            index=models.Index(fields=['supplier_name'], name='core_rawmat_supplie_b5c62c_idx'),
        ),
        migrations.AddIndex(
            model_name='rawmaterialtxn',
            index=models.Index(fields=['dc_number'], name='core_rawmat_dc_numb_3cf9aa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='salarypayment',
            unique_together={('employee', 'period_month', 'period_year')},
        ),
        migrations.AlterUniqueTogether(
            name='rawmaterialpurchasepayment',
            unique_together={('purchase', 'payment')},
        ),
    ]
